{"version":3,"sources":["utils/RecordsAPI.js","component/RecordForm.js","component/Record.js","component/AmountBox.js","component/Records.js","serviceWorker.js","index.js"],"names":["api","process","ACCOUNT_APP_API_RECORDS_URL","RecordForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","title","amount","e","name","target","value","setState","defineProperty","_this2","preventDefault","record","param","axios","post","concat","then","response","handleNewRecord","data","catch","error","console","log","react_default","a","createElement","className","onSubmit","onSubmitHandler","bind","type","placeholder","onChange","onChangeHandler","disabled","valid","React","Component","Record","edit","refs","Number","parseInt","id","put","RecordAPI","handleUpdateRecord","_this3","delete","handleDeleteRecord","onClick","handleEdit","handleDelete","defaultValue","ref","handleUpdate","editRecordComponent","recordRowComponent","AmountBox","Records","records","isLoaded","get","toConsumableArray","newRecords","map","item","objectSpread","filter","length","reduce","prev","curr","income","disbursement","_this$state","recordsComponent","message","i","Record_Record","key","editRecord","deleteRecord","balance","RecordForm_RecordForm","addRecord","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","component_Records","document","getElementById","URL","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bbb61bd6.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = process.env.ACCOUNT_APP_API_RECORDS_URL || \"https://5bc75e56cc83760013c1cce0.mockapi.io\";\n\nexport const getRecords = () =>\n    axios.get(`${api}/api/v1/records`)\n\n\nexport const createRecord = (record) =>\n    axios.post(`${api}/api/v1/records`,record)\n\n\nexport const updateRecord = (id, record) =>\n    axios.put(`${api}/api/v1/records/${id}`,record)\n\nexport const deleteRecord = (id) =>\n    axios.delete(`${api}/api/v1/records/${id}`)","import React from 'react'\n\nimport * as RecordsAPI from '../utils/RecordsAPI'\n\nexport default class RecordForm extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            date : \"\",\n            title : \"\",\n            amount : \"\"\n        }\n\n    }\n\n    onChangeHandler(e){\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState({\n            [name] : value\n        });\n    }\n\n    onSubmitHandler(e){\n        e.preventDefault();\n\n        const param = {\n            date : this.state.date,\n            title : this.state.title,\n            amount : this.state.amount\n        };\n\n        RecordsAPI.createRecord(param)\n            .then(\n                response => {\n                    this.props.handleNewRecord(response.data);\n                    this.setState({\n                        date : \"\",\n                        title : \"\",\n                        amount : \"\"\n                    });\n                }\n\n            ).catch(\n                error => console.log(error)\n            )\n\n\n    }\n\n    valid(){\n        return this.state.date && this.state.title && this.state.amount;\n    }\n\n\n\n    render(){\n        return(\n            <form className=\"form-inline m-3 col\" onSubmit={this.onSubmitHandler.bind(this)}>\n                <div className=\"form-group mr-2\">\n                    <input type='text' placeholder='Date' name='date' value={this.state.date} onChange={this.onChangeHandler.bind(this)}/>\n                </div>\n                <div className=\"form-group mr-2\">\n                    <input type='text' placeholder='Title' name='title' value={this.state.title} onChange={this.onChangeHandler.bind(this)}/>\n                </div>\n                <div className=\"form-group mr-2\">\n                    <input type='text' placeholder='Amount' name='amount' value={this.state.amount} onChange={this.onChangeHandler.bind(this)}/>\n                </div>\n\n                <button type='submit' className=\"btn btn-primary\" disabled={!this.valid()}>Create Record</button>\n            </form>\n        )\n    }\n\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as RecordAPI from '../utils/RecordsAPI'\n\nexport default class Record extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            edit : false\n        }\n\n\n    }\n\n    handleEdit(){\n        this.setState({\n            edit : !this.state.edit\n        });\n    }\n\n    handleUpdate(e){\n        e.preventDefault();\n        const record = {\n            date : this.refs.date.value,\n            title : this.refs.title.value,\n            amount : Number.parseInt(this.refs.amount.value,0)\n        }\n\n        RecordAPI.updateRecord(this.props.record.id,record)\n            .then(\n                response => {\n                    this.props.handleUpdateRecord(response.data);\n                    this.setState({\n                        edit : false\n                    });\n                }\n            ).catch(\n                error => console.log(error)\n            );\n    }\n\n    handleDelete(e){\n        RecordAPI.deleteRecord(this.props.record.id)\n            .then(\n                response => {\n                    this.props.handleDeleteRecord(response.data);\n                }\n            ).catch(\n                error => console.log(error)\n            );\n    }\n\n\n    recordRowComponent(){\n        return (\n            <tr>\n                <th>￥{this.props.record.date}</th>\n                <th>￥{this.props.record.title}</th>\n                <th>￥{this.props.record.amount}</th>\n                <th>\n                    <button className=\"btn btn-info mr-1\" onClick={this.handleEdit.bind(this)}>Edit</button>\n                    <button className=\"btn btn-danger mr-1\" onClick={this.handleDelete.bind(this)}>Delete</button>\n                </th>\n            </tr>\n        );\n    }\n\n    editRecordComponent(){\n        return (\n            <tr>\n                <th><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.date} ref=\"date\"/></th>\n                <th><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.title} ref=\"title\"/></th>\n                <th><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.amount} ref=\"amount\"/></th>\n\n                <th>\n                    <button className=\"btn btn-info mr-1\" onClick={this.handleUpdate.bind(this)}>Update</button>\n                    <button className=\"btn btn-danger mr-1\" onClick={this.handleEdit.bind(this)}>Cancel</button>\n                </th>\n            </tr>\n        );\n    }\n\n    render(){\n        if(this.state.edit){\n            return this.editRecordComponent();\n        }else{\n            return this.recordRowComponent();\n        }\n    }\n\n}\n\nRecord.propTypes = {\n    id : PropTypes.string,\n    date : PropTypes.string,\n    title : PropTypes.string,\n    amount : PropTypes.number\n}\n\n","import React from 'react'\n\nexport default function AmountBox(props) {\n    return (\n        <div className='col'>\n            <div className=\"card\">\n                <div className={`card-header bg-${props.type} text-white`}>{props.name}</div>\n                <div className=\"card-body\">{props.amount}</div>\n            </div>\n        </div>\n\n\n    );\n}","import React from 'react'\n// import {getJSON} from 'jquery'\nimport * as RecordsAPI from '../utils/RecordsAPI'\nimport RecordForm from \"./RecordForm\"\nimport Record from \"./Record\";\nimport AmountBox from './AmountBox'\n\n\nclass Records extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            records:[],\n            error:null,\n            isLoaded:false\n        }\n\n    }\n\n    componentDidMount() {\n        //jquery的get请求\n        // getJSON(\"http://localhost:3000/records\").then(\n        //     response => this.setState({\n        //         records : response,\n        //         isLoaded : true\n        //     }),\n        //     error => (\n        //         this.setState({\n        //            error : error.statusText,\n        //            isLoaded : true\n        //         },() => console.log(error))\n        //     )\n        // )\n\n\n        //axios的get请求\n\n        RecordsAPI.getRecords()\n        .then(\n            response => this.setState({\n                records: response.data,\n                isLoaded: true\n            })\n        ).catch(\n            error => (\n                this.setState({\n                   error : error,\n                   isLoaded : true\n                },() => console.log(error))\n            )\n        )\n    }\n\n    addRecord(record){\n        this.setState({\n            error : null,\n            isLoaded : true,\n            records : [\n                ...this.state.records,\n                record\n            ]\n        });\n    }\n\n    editRecord(record){\n        console.log(record);\n        // const recordIndex = this.state.records.indexOf(oldRecord);\n        const newRecords = this.state.records.map((item) => {\n            if(item.id !== record.id){\n                return item;\n            }\n            return {\n                ...item,\n                ...record\n            }\n        });\n        this.setState({\n            records : newRecords\n        });\n    }\n\n    deleteRecord(record){\n        const newRecords = this.state.records.filter((item) => {\n            return item.id !==  record.id\n        });\n        this.setState({\n            records : newRecords\n        });\n    }\n\n    income(){\n        let amount =  this.state.records.filter((record) => {\n            return record.amount >= 0\n        });\n        if(amount.length > 0){\n            return amount.reduce((prev,curr) => {\n                return prev + Number.parseInt(curr.amount,0)\n            },0);\n        }\n        return 0;\n    }\n\n    balance(){\n        return this.income() + this.disbursement();\n    }\n\n    disbursement(){\n        let amount = this.state.records.filter((record) => {\n            return record.amount < 0\n        });\n        if(amount.length > 0){\n            return amount.reduce((prev,curr) => {\n                return prev + Number.parseInt(curr.amount,0)\n            },0);\n        }\n        return 0;\n    }\n\n\n    render() {\n        const {error,isLoaded,records} = this.state;\n        let recordsComponent = null;\n        if(error){\n            recordsComponent = <div>{error.message}</div>\n        }else if(!isLoaded){\n            recordsComponent =  <div>Loading...</div>\n        }else{\n            recordsComponent =  (\n                <table className=\"table table-bordered m-3\">\n                    <thead>\n                    <tr>\n                        <th>Data</th>\n                        <th>Title</th>\n                        <th>Amount</th>\n                        <th>Opertion</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {records.map((record,i) =>\n                        <Record key={i}\n                                record={record}\n                                handleUpdateRecord={this.editRecord.bind(this)}\n                                handleDeleteRecord={this.deleteRecord.bind(this)}\n                        />\n                    )}\n                    </tbody>\n                </table>\n            );\n        }\n        return (\n            <div>\n                <h1>Records</h1>\n                <div className='form-inline m-3'>\n                    <AmountBox type=\"info\" name=\"income\" amount={this.income()}/>\n                    <AmountBox type=\"danger\" name=\"Disbursement\" amount={this.disbursement()}/>\n                    <AmountBox type=\"success\" name=\"Balance\" amount={this.balance()}/>\n                </div>\n\n                <RecordForm handleNewRecord = {this.addRecord.bind(this)}/>\n                {recordsComponent}\n            </div>\n        );\n    }\n}\n\nexport default Records;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Records from './component/Records';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Records />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}